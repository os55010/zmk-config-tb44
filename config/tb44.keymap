#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>


#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        z_shift: z_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "Z_SHIFT";
            #binding-cells = <0>;
            bindings = <&mt LEFT_SHIFT Z>, <&kp LS(Z)>;

            tapping-term-ms = <120>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
                &kp Q          &kp W         &kp E                &kp R        &kp T        &kp Y     &kp U         &kp I          &kp O      &kp P    &kp O
                &kp A          &kp S         &kp D                &kp F        &kp G        &kp H     &kp J         &kp K          &kp L      &kp P    &kp MINUS
                &kp Z          &kp X         &kp C                &kp V        &kp B        &kp B     &kp N         &kp M          &kp COMMA  &kp DOT  &kp ENTER
                &mt LCTRL TAB  &kp LEFT_WIN  &mt LEFT_ALT DELETE  &lt 1 SPACE  &mkp MB1     &mkp MB2  &lt 2 SPACE   &kp BACKSPACE  &none      &none    &kp SLASH
            >;
        };

        FUNCTION {
            bindings = <
                &kp Q          &kp W         &kp E                &kp R        &kp T        &kp Y     &out OUT_TOG  &kp Y          &kp U      &kp I    &kp O
                &kp A          &kp S         &kp D                &kp F        &kp G        &kp H     &kp J         &kp K          &kp L      &kp P    &kp MINUS
                &z_shift       &kp X         &kp C                &kp V        &kp B        &kp B     &kp N         &kp M          &kp COMMA  &kp DOT  &kp ENTER
                &mt LCTRL TAB  &kp LEFT_WIN  &mt LEFT_ALT DELETE  &lt 1 SPACE  &mkp MB1     &mkp MB2  &lt 2 SPACE   &kp BACKSPACE  &none      &none    &kp SLASH
            >;
        };

        NUMBER {
            bindings = <
                &kp Q          &kp W         &kp E                &kp R        &kp T        &kp Y     &out OUT_TOG  &kp Y          &kp U      &kp I    &kp O
                &kp A          &kp S         &kp D                &kp F        &kp G        &kp H     &kp J         &kp K          &kp L      &kp P    &kp MINUS
                &z_shift       &kp X         &kp C                &kp V        &kp B        &kp B     &kp N         &kp M          &kp COMMA  &kp DOT  &kp ENTER
                &mt LCTRL TAB  &kp LEFT_WIN  &mt LEFT_ALT DELETE  &lt 1 SPACE  &mkp MB1     &mkp MB2  &lt 2 SPACE   &kp BACKSPACE  &none      &none    &kp SLASH
            >;
        };

        BLUETOOTH {
            bindings = <
                &trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans  &trans
            >;
        };

        MOUSE {
            bindings = <
                &trans  &trans  &trans  &trans  &trans  &trans    &trans    &mkp MB3  &mkp MB2  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans    &mo 5     &trans    &trans    &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &mkp MB4  &mkp MB5  &trans    &trans    &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};